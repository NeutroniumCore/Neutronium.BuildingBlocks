<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neutronium.BuildingBlocks.ApplicationTools</name>
    </assembly>
    <members>
        <member name="T:Neutronium.BuildingBlocks.ApplicationTools.ChooserCommand`1">
            <summary>
            <see cref="T:Neutronium.BuildingBlocks.ApplicationTools.IChooserCommand`1"/> implementation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Neutronium.BuildingBlocks.ApplicationTools.CommandResult`1">
            <summary>
            Result of a command that may throw exception
            </summary>
            <typeparam name="TResult">
            Command result type
            </typeparam>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.CommandResult`1.Result">
            <summary>
            Result
            </summary>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.CommandResult`1.Exception">
            <summary>
            Exception if any
            </summary>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.CommandResult`1.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.CommandResult`1.HasError">
            <summary>
            HasError
            </summary>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.CommandResult`1.Cancelled">
            <summary>
            Cancelled
            </summary>
        </member>
        <member name="T:Neutronium.BuildingBlocks.ApplicationTools.IApplication">
            <summary>
            Application abstraction
            </summary>
        </member>
        <member name="M:Neutronium.BuildingBlocks.ApplicationTools.IApplication.ForceClose">
            <summary>
            Close the application without calling the cancellation hooks.
            </summary>
        </member>
        <member name="M:Neutronium.BuildingBlocks.ApplicationTools.IApplication.TryClose">
            <summary>
            Try to close the application
            </summary>
        </member>
        <member name="M:Neutronium.BuildingBlocks.ApplicationTools.IApplication.Restart(System.String)">
            <summary>
            Close the application and restart it.
            </summary>
            <param name="commandLineOptions">
            command line to be applied to the restarting application
            </param>
        </member>
        <member name="E:Neutronium.BuildingBlocks.ApplicationTools.IApplication.MainWindowClosing">
            <summary>
            Sent when the main window is closing
            </summary>
        </member>
        <member name="E:Neutronium.BuildingBlocks.ApplicationTools.IApplication.Closed">
            <summary>
            Sent when the main window is closing
            </summary>
        </member>
        <member name="E:Neutronium.BuildingBlocks.ApplicationTools.IApplication.SessionEnding">
            <summary>
            Sent when the session is ending
            </summary>
        </member>
        <member name="T:Neutronium.BuildingBlocks.ApplicationTools.IChooserCommand`1">
            <summary>
            Helper to create a command from <see cref="T:Neutronium.BuildingBlocks.ApplicationTools.IFilePicker"/> or <see cref="T:Neutronium.BuildingBlocks.ApplicationTools.IFolderPicker"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.IChooserCommand`1.CanBeExecuted">
            <summary>
            CanBeExecuted
            </summary>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.IChooserCommand`1.Picker">
            <summary>
            File or Folder picker instance
            </summary>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.IChooserCommand`1.Results">
            <summary>
            Results as observable
            </summary>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.IChooserCommand`1.Choose">
            <summary>
            Picker exposed as command.
            </summary>
        </member>
        <member name="T:Neutronium.BuildingBlocks.ApplicationTools.IDisposableProgress`1">
            <summary>
            Disposable progress 
            </summary>
            <typeparam name="T">
            Progress type.
            </typeparam>
        </member>
        <member name="T:Neutronium.BuildingBlocks.ApplicationTools.IFilePicker">
            <summary>
            File picker abstraction
            </summary>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.IFilePicker.Extensions">
            <summary>
            Accepted extensions
            </summary>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.IFilePicker.ExtensionDescription">
            <summary>
            Extension description
            </summary>
        </member>
        <member name="T:Neutronium.BuildingBlocks.ApplicationTools.IFolderPicker">
            <summary>
            Folder picker abstraction
            </summary>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.IFolderPicker.Multiselect">
            <summary>
            true to allow multi select
            </summary>
        </member>
        <member name="T:Neutronium.BuildingBlocks.ApplicationTools.IIODialog">
            <summary>
            Common abstraction for both <see cref="T:Neutronium.BuildingBlocks.ApplicationTools.IFilePicker"/> and <see cref="T:Neutronium.BuildingBlocks.ApplicationTools.IFolderPicker"/>
            </summary>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.IIODialog.Title">
            <summary>
            Window title
            </summary>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.IIODialog.Directory">
            <summary>
            Directory where the picker is opened
            </summary>
        </member>
        <member name="M:Neutronium.BuildingBlocks.ApplicationTools.IIODialog.Choose">
            <summary>
            Open the picker
            </summary>
            <returns>
            Entity chosen, null if canceled
            </returns>
        </member>
        <member name="T:Neutronium.BuildingBlocks.ApplicationTools.WindowType">
            <summary>
            Message box window type
            </summary>
        </member>
        <member name="T:Neutronium.BuildingBlocks.ApplicationTools.INativeMessageBox">
            <summary>
            Native message box abstraction
            </summary>
        </member>
        <member name="M:Neutronium.BuildingBlocks.ApplicationTools.INativeMessageBox.ShowConfirmationMessage(System.String,System.String,Neutronium.BuildingBlocks.ApplicationTools.WindowType)">
            <summary>
            Show a message to end user and wait for an answer
            </summary>
            <param name="message">Message to be displayed.</param>
            <param name="title">The title of the window.</param>
            <param name="type"></param>
            <returns> 
            true if end users agrees to the question
            </returns>
        </member>
        <member name="M:Neutronium.BuildingBlocks.ApplicationTools.INativeMessageBox.ShowMessage(System.String,System.String)">
            <summary>
            Show a message to end user
            </summary>   
            <param name="message">Message to be displayed.</param>
            <param name="title">The title of the window.</param>
        </member>
        <member name="T:Neutronium.BuildingBlocks.ApplicationTools.ITaskCancellableCommand`1">
            <summary>
            Cancellable command
            </summary>
            <typeparam name="TResult">
            Result type
            </typeparam>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.ITaskCancellableCommand`1.Computing">
            <summary>
            True if the command is executing
            </summary>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.ITaskCancellableCommand`1.CanBeExecuted">
            <summary>
            True if the command can be executed
            </summary>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.ITaskCancellableCommand`1.Run">
            <summary>
            Execute the command
            </summary>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.ITaskCancellableCommand`1.Cancel">
            <summary>
            Cancel the current execution
            </summary>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.ITaskCancellableCommand`1.Results">
            <summary>
            Results exposed as Observable <see cref="T:Neutronium.BuildingBlocks.ApplicationTools.CommandResult`1"/>
            </summary>
        </member>
        <member name="T:Neutronium.BuildingBlocks.ApplicationTools.ITaskCancellableCommand`2">
            <summary>
            Cancellable command with progress
            </summary>
            <typeparam name="TResult">
            Result type
            </typeparam>
            <typeparam name="TProgress">
            Progress type
            </typeparam>
        </member>
        <member name="P:Neutronium.BuildingBlocks.ApplicationTools.ITaskCancellableCommand`2.Progress">
            <summary>
            Command progress exposed as Observable 
            </summary>
        </member>
        <member name="T:Neutronium.BuildingBlocks.ViewModel">
            <summary>
            Base class for ViewModel providing implementation of <see cref="T:System.ComponentModel.INotifyPropertyChanging"/> and <see cref="T:System.ComponentModel.INotifyPropertyChanging"/>
            </summary>
        </member>
        <member name="M:Neutronium.BuildingBlocks.ViewModel.Set``1(``0@,``0,System.String)">
            <summary>
            Update property value and call corresponding <see cref="T:System.ComponentModel.INotifyPropertyChanging"/> and <see cref="T:System.ComponentModel.INotifyPropertyChanging"/> if needed
            </summary>
            <typeparam name="T">Property type</typeparam>
            <param name="property">Property to be updated</param>
            <param name="value">New value</param>
            <param name="propertyName">Property name (filled by compiler when left null)</param>
            <returns>
            True if property value has changed and events have been fired
            </returns>
        </member>
    </members>
</doc>
